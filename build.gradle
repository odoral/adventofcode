plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.5.0.2730"
}

allprojects {
    repositories {
        mavenCentral()
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "odoral_adventofcode"
        property "sonar.organization", "odoral"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.source", "8"
        property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    dependencies {
        implementation 'ch.qos.logback:logback-classic:1.3.5'
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        implementation 'com.google.guava:guava:31.1-jre'
        compileOnly 'org.projectlombok:lombok:1.18.24'

        annotationProcessor 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
        testCompileOnly 'org.projectlombok:lombok:1.18.24'
    }

    sonarqube {
        properties {
            property "sonar.projectKey", "odoral_adventofcode"
            property "sonar.organization", "odoral"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.java.source", "8"
            property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        }
    }

    wrapper {
        gradleVersion = '7.3'
        distributionType = Wrapper.DistributionType.BIN
    }

    jacoco {
        toolVersion = "0.8.0"
    }
}

// See here for more info: https://docs.gradle.org/6.4-rc-1/samples/sample_jvm_multi_project_with_code_coverage.html
//
// tag::coverageTask[]
// task to gather code coverage from multiple subprojects
// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
// that `test` (or other tasks generating code coverage) run before generating the report.
// You can achieve this by calling the `test` lifecycle task manually
// $ ./gradlew test codeCoverageReport
tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                if (subproject.buildFile.exists()) {
                    //the jacoco extension may be disabled for some projects
                    if (testTask.extensions.getByType(JacocoTaskExtension).isEnabled()) {
                        sourceSets subproject.sourceSets.main
                        executionData(testTask)
                    } else {
                        logger.warn('Jacoco extension is disabled for test task \'{}\' in project \'{}\'. this test task will be excluded from jacoco report.', testTask.getName(), subproject.getName())
                    }
                }
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
    }
}
// end::coverageTask[]